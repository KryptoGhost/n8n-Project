{
  "nodes": [
    {
      "parameters": {
        "pollTimes": {
          "item": [
            {
              "mode": "everyMinute"
            }
          ]
        },
        "filters": {}
      },
      "type": "n8n-nodes-base.gmailTrigger",
      "typeVersion": 1.3,
      "position": [
        0,
        0
      ],
      "id": "736340a9-9209-485e-923f-afc3e16be2df",
      "name": "Gmail Trigger",
      "credentials": {
        "gmailOAuth2": {
          "id": "Kb9TPGqLlRz4dxms",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "operation": "get",
        "messageId": "={{ $json.id }}",
        "simple": false,
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        224,
        0
      ],
      "id": "51fddf49-e999-474a-bf37-a0db48e245bd",
      "name": "Get a message",
      "webhookId": "049a1eb4-6d44-4d2c-a513-4e93767caf07",
      "credentials": {
        "gmailOAuth2": {
          "id": "Kb9TPGqLlRz4dxms",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Email Body: {{ $json.plainText }}",
        "messages": {
          "messageValues": [
            {
              "message": "You are an experienced virtual assistant that classifies emails into one or more of the following\n-Notification\n-Financial\n-Career\n-meeting/calendar\n-personal\n-Promotions\n-work\n-Action required\n-other\n\nâœ” Output format:\nReturn a json array of strings where each string is a category name \nfor example\n{\n\"Notification\"\n\"Promotions\"\n}\nOnly include categories that applies to the email.\nDo not add eexplanations."
            }
          ]
        },
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        672,
        0
      ],
      "id": "e16da33c-1218-486e-9bdc-5315247ade76",
      "name": "Basic LLM Chain"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        752,
        224
      ],
      "id": "6e317d1a-3a24-456b-82a1-10274b1b386f",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "2oiWuYrkMqpJlZWf",
          "name": "Google Gemini(PaLM) Api account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const results = [];\n\nfor (const item of $input.all()) {\n  // 1. Get the HTML content from the current item.\n  //    Adjust 'html' key if your previous node stores it differently (e.g., 'body' or 'text').\n  const html = item.json.html || ''; \n\n  // 2. Perform the replacements to strip down the HTML.\n  let plainText = html\n    \n    // 2a. Remove <script> tags and their content (non-greedy match).\n    .replace(/<script\\b[^>]*>[\\s\\S]*?<\\/script>/gi, '')\n    \n    // 2b. Remove <style> tags and their content (non-greedy match).\n    .replace(/<style\\b[^>]*>[\\s\\S]*?<\\/style>/gi, '')\n    \n    // 2c. Replace block-level elements (like <p>, <div>, <br>) with newlines for formatting.\n    .replace(/<(p|div|br)\\b[^>]*>/gi, '\\n') \n    \n    // 2d. Strip remaining HTML tags (e.g., <b>, <span>, <a>)\n    .replace(/<[^>]+>/g, '')\n    \n    // 2e. Replace common HTML entities with their space or character equivalent.\n    .replace(/&nbsp;/gi, ' ')\n    .replace(/&amp;/gi, '&')\n    .replace(/&quot;/gi, '\"')\n    .replace(/&#39;/gi, \"'\")\n    .replace(/&lt;/gi, '<')\n    .replace(/&gt;/gi, '>')\n    \n    // 2f. Clean up excessive newlines (optional, but helpful).\n    .replace(/(\\n\\s*){2,}/g, '\\n\\n')\n    \n    // 2g. Trim whitespace from the start/end.\n    .trim();\n\n  // 3. Push the result back to the workflow.\n  results.push({\n    json: {\n      ...item.json, // Keep original data\n      plainText: plainText // Add the new plain text field\n    },\n  });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        0
      ],
      "id": "018e9f6a-71ca-43a8-a313-836ce6cebb06",
      "name": "turn html to plaintext"
    },
    {
      "parameters": {
        "operation": "addLabels"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        1184,
        -16
      ],
      "id": "2dc87482-5863-448c-8eb7-ac2c1a821b1b",
      "name": "Add label to message",
      "webhookId": "a672df78-e4f9-453b-a8b9-1ffb0df58e8f",
      "credentials": {
        "gmailOAuth2": {
          "id": "Kb9TPGqLlRz4dxms",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "resource": "label"
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        240,
        -288
      ],
      "id": "00c0e01d-a435-4c94-8b6a-87af7e444c96",
      "name": "Get many labels",
      "webhookId": "34acebe2-8516-40c4-a032-2d9bf15a9bec",
      "credentials": {
        "gmailOAuth2": {
          "id": "Kb9TPGqLlRz4dxms",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const results = [];\n\n// Define the label categories and their expected IDs in a lookup structure.\n// NOTE: These IDs are placeholders. You MUST replace them with your actual Gmail Label IDs.\nconst labelIdMap = {\n    \"Notification\": \"gLaBeL_1436ft679465434\",\n    \"Updates\": \"gLaBeL_987xyz54321abc\",\n    \"Promotions\": \"gLaBeL_555def666ghi777\",\n    \"Forums\": \"gLaBeL_aaa111bbb222ccc\"\n    // Add any other specific labels you need to check\n};\n\nfor (const item of $input.all()) {\n    // 1. Assuming the previous Gmail node outputs an array of labels \n    //    under a key like 'labels' or 'labelIds' on the item.json.\n    //    Adjust this line if the structure is different.\n    const itemLabels = item.json.labels|| []; \n    \n    // An object to store the matched label name and ID for the current email item\n    const matchedLabels = {};\n    \n    for (const label of itemLabels) {\n        // The 'label' object might look like { id: '...', name: '...' } \n        // depending on how the Gmail node is configured.\n        \n        // Use the label name as the key for the lookup\n        const labelName = label.name; \n        \n        // Check if this label name is one we are tracking\n        if (labelIdMap.hasOwnProperty(labelName)) {\n            \n            // Store the category name and its ID\n            matchedLabels.category = labelName;\n            \n            // Priority 1: Use the ID from the predefined map (since you requested specific IDs)\n            matchedLabels.labelID = labelIdMap[labelName]; \n            \n            // OPTIONAL: If you want to use the ID that the Gmail node provided, use this instead:\n            // matchedLabels.labelID = label.id; \n\n            // Since an email can have multiple labels, you might want to break \n            // after finding the first one, or adjust the structure to handle multiple matches.\n            // For now, it will use the last matched label if there are multiple.\n            break; \n        }\n    }\n    \n    // Push the result: original data + the new matched label info\n    results.push({\n        json: {\n            ...item.json,           // Keep original data\n            ...matchedLabels        // Add the new category/labelID\n        }\n    });\n}\n\nreturn results;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1024,
        0
      ],
      "id": "bf191d2b-9db0-4acd-a1cb-724c6c2994b6",
      "name": "pass Id with category"
    }
  ],
  "connections": {
    "Gmail Trigger": {
      "main": [
        [
          {
            "node": "Get a message",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get a message": {
      "main": [
        [
          {
            "node": "turn html to plaintext",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Basic LLM Chain": {
      "main": [
        [
          {
            "node": "pass Id with category",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "turn html to plaintext": {
      "main": [
        [
          {
            "node": "Basic LLM Chain",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "pass Id with category": {
      "main": [
        []
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "dde4fc4c62478cd1b2d728d3c0ca8ee8401bcc934d50f708d35dbcd718dc2a37"
  }
}
